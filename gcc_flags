
GCC flags:
3.2 Options Controlling the Kind of Output
	|
	--> -x language: This flag specifies the language for the compiler. By default, 
	|				 the compiler assumes the language based on the file suffix 
	|				 (.c, .s, .f90, etc.). However, you can explicitly indicate 
	|				 the language using flags like '-x assembler-with-cpp'. 
	|				 This flag tells the compiler that the code will be written 
	|				 in assembly language, but before compilation, the C preprocessor 
	|				 will scan the assembly code for any preprocessor directives such 
	|				 as #define or #include."
	|
	--> -specs=file: This flag indicates the configuration file used by gcc to specify 
					 rules for building and linking code. For instance, using "-specs=nano.spec",
					 which is a built-in spec file for gcc, tells the compiler to use the nano
					 C library instead of the standard library. The nano C library is a 
					 reduced library compared to the standard library used for embedded software
					 where memory and processing recources are limited.
	
3.8 Options to Request or Suppress Warnings	
	|
	--> -Wall: This flag enables a list of warnings considered as questionable.

3.10 Options for Debugging Your Program	
	|
	-->	-g: Produce debugging information in the operating systemÂ´s native format.
	|
	--> -gdwarf-version: Produce debugging information in DWARF format

3.11 Options That Control Optimization	
	|
	--> -Og: This flag enables the optimization level recomended by gcc manual for 
	|		 debugging. It offers a reasonable level of optimization while 
	|		 maintaining fast compilation and a good debugging experience.
	|	
	-->	-fdata-sections and 
		-ffunction-sections: These flags allow the compiler to place functions and
							 global/static initialized data into separete sections.
							 They can help discard unused section, which optimize
							 the size of final binary. So, their goal is to optimize 
							 the final binary by keeping unused section out of it.
							 The unused sections can include debugging information, 
							 unused variables, unused funtions and so on.
			
	
3.13 Options Controlling the Preprocessor	
	|
	-->	-D: Define a macro (-DDEBUG = #define DEBUG)
	|
	--> -MMD: This flag generate a dependency file for each output file generated.
	|		  The dependency file (.d) contains a list of all sources, which the sources
	|		  file depends on, such as header files. 
	|
	-->	-MP: This flag tells the GCC compiler to generate a phony target for each 
	|		  dependency in the Makefile other than the main file. For example,
	|		  if the project has test.h as dependency. Then the phony target 
	|		  'test.h:' will be added to the dependency file 'test.d'.
	|
	--> -MF file: This flag specifies the name of the dependency file to generate.
				  This option override the previous two options -MMD and -MP.
	

3.14 Passing Options to the Assembler	
	|
	-->	-Wa,option: To pass an option to the assembler. The option is related to the
					assembler used in the compilation process. For example, if the 
					assembler used is GNU Assembler, then the flag options need to 
					be the GNU Assembler option.
	
3.15 Options for Linking	
	|
	--> -T script: This flag indicate a linker script (.ld) for compiler. This flag
	|			   may be required for bare-boards without an operating system.
	|
	-->	-Wl,option: To pass an option to the linker. The option is related to the
					linker used in the compilation process. For example, if the 
					linker used is GNU linker, then the flag options should be	
					a valid GNU linker option.

3.16 Options for Directory Search	
	|
	-->	-I: Add the directory dir to the list of directories to be searched for 
			header files during preprocessing.


ARM options:
-mcpu: This option defines the name of the target ARM processor. It is derived from the 
	   target Arm processor architecture (-mtune option) and indirectly from the 
	   Arm architecture (-march option). For example, when setting the -mcpu=Cortex-M4
	   the -mtune and -march are automatically set. This is set to -mtune=Cortex-M4
	   and -march=ARMv7E-M. The -march is set to ARMv7E-M due to all Cortex-M4 processors
	   are based on the ARMv7E-M arm architecture. The list of all available processors
	   can be found in the -mtune option description.
	   The Arm architecture describes features such as a base set of instructions, 
	   hardware virtualization, interrupt handling capabilities and so on. The processor
	   architecture describes additional features namely floating-point unit (FPU),
	   digital signal processing (DSP) instructions, and a memory protection unit (MPU). 	   
	   The difference between the Arm architecture and the processor architecture is that
	   the Arm architecture is the base architecture that the processors are derived from.
	   For instance, Cortex-M4 and Cortex-M7 are both derived from ARMv7E-M arm architecture.
	   Both owns the same base set of instructions. However, each one can have additional 
	   instruction to handle processor specific features, in case of Cortex-M4 includes 
	   DSP instructions and in case of Cortex-M7 includes SIMD (Single Instruction, 
	   Multiple Data) instructions. 

-mfpu: This specifies what floating-point hardware (or hardware emulation) is available
	   on the target. The available options used in that flag can be found in the arm
	   architecture reference manual of the processor. For example, Cortex-M4 is based on
	   the ARMv7E-M arm architecture. Then the information about the FPU option used by compiler
	   can be found in the Armv7-M Architecture Reference Manual. The FPU option for that case 
	   is FPv4-SP-D16, which refers to the single-precision floating-point unit with a 
	   16-doubleword register file. The Armv7-M Architecture supports both FPv4-SP-D16 and 
	   FPv5-D16 floating-point options. The later can be used for single and double precision 
	   calculation.
	   
-mfloat-abi: This defines which floating-point will be used. There are three possible 
			 choices: soft, softfp or hard. 
			 soft perform floating-point calculation in software by calling a libraries.
			 softfp perform floating-point calculation using a mix of hardware floating-point
			 instruction and software libraries.
			 hard uses only hardware floating-point instructions.
			 
-mthumb or -marm: Defines the instruction set used, which can be thumb (16-bit instructions 
				   size) and arm (32-bit instructions size). ARM mode provides maximum 
				   performance and efficiency by using 32-bit instructions, while Thumb-2
				   mode provides improved code density and reduced memory usage.


GNU Linker options:
-Map=mapfile: Prints a link map to the file mapfile. The link map provides information 
			  like:
			  - Where object files are mapped into memory.
			  - How common symbols are allocated.
			  - The values assigned to symbols.

--cref: Output a cross reference table. If a linker map file is being generated, the cross
		reference table is printed to the map file. Otherwise, it is printed on the standard
		output.
		The cross-reference table lists all symbols defined in the code, such as functions, 
		variables, and macros, along with their location in the object file.
		The table look like this:
		
		Symbol          Type        Value       Referenced by
		-------         ----        -----       ------------
		main            function    0x00000000  app.o
		foo             function    0x00000010  app.o
		var1            variable    0x00000030  app.o
		var2            variable    0x00000040  app.o
 
--gc-sections: Enable garbage collection of unused input sections. It instructs 
			   the linker to remove unused sections from the final binary output.
			   When the --gc-sections option is used, the linker analyzes the object 
			   files and libraries that are being linked together to identify which 
			   sections are actually used by the program. Any sections that are not 
			   referenced by the program are marked as unused and removed from the 
			   output file.



GNU assembler options:
-a
-ad
-alms (combined listing flags of the GNU assembler options)